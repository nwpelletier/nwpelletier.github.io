[
  {
    "title": "EDU-VRAI",
    "technologies": "Unity, C#, VR",
    "content": [
      {
        "type": "text",
        "value": "A networked VR project built in Unity using a client-server architecture. Players could interact with programmable lab equipment in real time, simulating experiments in a shared virtual space.  I implemented interaction systems using a finite state machine to manage object behavior and player input cleanly across networked clients.  Two systems I worked extensively on were the Incubator and Tube Fuser"
      },
      { "type": "image", "src": "/pictures/edu-vrai-incubator.jpg" },
      {
        "type": "text",
        "value": "The incubator allows users to swab different areas of the virtual lab, collect samples in petri dishes, and place them inside the incubator. Once inside, users can run heating and cooling cycles to control the temperature, which updates in real time and stays synced across all connected players."
      },
      { "type": "image", "src": "/pictures/edu-vrai-tubefuser.jpg" },
      {
        "type": "text",
        "value": "The tube fuser operates in several states. A 'teacher' can trigger error codes that the student must troubleshoot. The experience includes detailed VR interactions, such as grabbing a magnetic tool to hold a razor blade and carefully inserting it into the machine. Components animate realistically and actions are synchronized for all users. The user can also open and close the glass door, lock or unlock the device, and reset it as needed."
      },
      {
        "type": "text",
        "value": "The project emphasized reliability and low-latency interaction, with a strong focus on immersive, educational design."
      }
    ],
    "url": "https://vrai-dev.johnabbott.qc.ca/"
  },
  {
    "title": "CERASP Website",
    "technologies": "HTML, CSS, JS, React, Node.js, Strapi, Vercel",
    "content": [
      {
        "type": "text",
        "value": "Redesign of CERASP's website using React and Strapi to replace their current WordPress setup. The new site is designed to be faster, more maintainable, and easier for the team to update without technical overhead. It emphasizes a clean, accessible display of extensive content, intentionally avoiding burying information behind layers of link-clicks."
      },
      {
        "type": "image",
        "src": "/pictures/cerasp-overview.jpg"
      },

      {
        "type": "text",
        "value": "The frontend is mobile-responsive and features CSS animations and custom React hooks to manage scroll behavior. Navigation is snappy and intuitive across all devices, offering a fluid, app-like experience. React Context is used for language localization, making it easy to switch between French and English seamlessly."
      },
      {
        "type": "image",
        "src": "/pictures/cerasp-mobile.jpg"
      }
    ],
    "url": "https://cerasp.vercel.app"
  },
  {
    "title": "Game Map Generator",
    "technologies": "Unity, C#",
    "content": [
      {
        "type": "text",
        "value": "Creates a grid-based maze of varying room types. You can set any grid size (tested with sizes 100+), and the generator still works reliably. The maze always has one start room (green), one end room (red), and a mazelike path connecting them.  This personal project is inspired by the procedural generation of dungeons in games like The Binding of Isaac and Spelunky."
      },
      {
        "type": "image",
        "src": "/pictures/map-generator-layout1.jpg"
      },
      {
        "type": "text",
        "value": "Makes use of room prefabs (with every combination of open doors to the four cardinal directions), which are placed randomly in the grid. The generator ensures that each room is connected to at least one other room, creating a continuous path through the maze.  Kruskal's algorithm is used to ensure that the maze is fully connected and has no loops."
      },
      {
        "type": "image",
        "src": "/pictures/map-generator-layout2.jpg"
      },
      {
        "type": "text",
        "value": "The rooms are currently marked with colored spheres to indicate their type (spawn, end, trap-room, treasure-room, etc.). Additional scripts leverage the placement of these rooms so the player will have to traverse many rooms before reaching the end, and will encounter traps and treasures along the way.  Room sub-types have floor-grids that can be used to place objects like enemies, items, and obstacles, also with the capacity to be randomized."
      },
      {
        "type": "image",
        "src": "/pictures/map-generator-workspace.jpg"
      }
    ],
    "url": ""
  },
  {
    "title": "Whisper Ads",
    "technologies": "JavaScript, HTML, CSS",
    "content": [
      {
        "type": "text",
        "value": "A Chrome extension that automatically lowers the volume of Twitch ads to a user-defined level. It uses MutationObservers to detect when an ad is playing and adjusts the volume accordingly, ensuring a consistent and comfortable viewing experience."
      },
      {
        "type": "image",
        "src": "/pictures/whisper-ads-gui.jpg"
      },
      {
        "type": "text",
        "value": "The extension is designed to be lightweight and unobtrusive, running in the background without affecting the overall performance of the browser or Twitch itself."
      },
      {
        "type": "image",
        "src": "/pictures/whisper-ads-icon.png"
      },
      {
        "type": "text",
        "value": "Future improvements would include adding support for more platforms and enhancing the user interface for easier configuration and customization."
      }
    ],
    "url": "https://github.com/nwpelletier/ad-volume-normalizer/"
  }
]
