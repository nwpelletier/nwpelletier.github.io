[
  {
    "title": "EDU-VRAI",
    "technologies": "Unity, C#, VR",
    "content": [
      {
        "type": "text",
        "value": "A networked VR project built in Unity using a client-server architecture, where multiple users can interact with programmable lab equipment in real time to simulate scientific experiments collaboratively in a shared virtual environment. When I joined the project, a modular BTV system (Behavior, Target, Visualizer) was already in place to organize interaction logic. My role involved extending this model across new equipment and objects while maintaining sync across clients using Unity's Netcode RPC system."
      },
      { "type": "image", "src": "/pictures/edu-vrai-incubator.jpg" },
      {
        "type": "text",
        "value": "I focused heavily on debugging and expanding the functionality of the tube fuser and tube sealer, adding custom error states and teacher-student interaction modes. I also designed and implemented several systems from scratch, including the incubator, autoclave, and an adjustable lab chair—each with interactive VR controls and networked state management."
      },
      { "type": "image", "src": "/pictures/edu-vrai-tubefuser.jpg" },
      {
        "type": "text",
        "value": "One particularly challenging feature was the ability to “paint” bacteria samples onto petri dishes. This required encoding sample data into compact, serializable forms (using byte arrays and custom structs) that could be transmitted via RPC and reliably synced between clients."
      },
      {
        "type": "text",
        "value": "Beyond system logic, I also contributed to UX and polish: adding visual highlights on hoverable objects, automatic resets for objects that fell out of bounds, and key audio cues—like ambient fans, machinery clicks, and interface feedback sounds—to enhance immersion. The project emphasized low-latency, high-reliability communication, with careful attention to intuitive user experience in a complex, educational VR setting."
      }
    ],
    "url": "https://vrai-dev.johnabbott.qc.ca/",
    "urlTitle": "Visit the VRAI website"
  },
  {
    "title": "CERASP Website",
    "technologies": "HTML, CSS, JS, React, Node.js, Strapi, Vercel",
    "content": [
      {
        "type": "text",
        "value": "Redesign of CERASP's website using React for the frontend and Strapi as a headless CMS, replacing their outdated WordPress setup. The new site is significantly faster and more responsive, combining public-facing static content (like localization files and structured JSON) with a CMS-driven backend for the sections the client needs to manage dynamically. Strapi allows the team to add, edit, or delete content entries without touching code, while the frontend remains highly performant and lightweight."
      },
      {
        "type": "image",
        "src": "/pictures/cerasp-overview.jpg"
      },

      {
        "type": "text",
        "value": "The site is fully bilingual (English/French), using React Context and localized JSON files to provide near-instant switching between languages—no reloads, no delays. This was a major improvement over the older WordPress version, which suffered from slower load times and buried content navigation. We preserved the original site's palette and general layout, but focused on a cleaner, more intuitive design that simplifies access for users and administrators alike."
      },
      {
        "type": "image",
        "src": "/pictures/cerasp-mobile.jpg"
      },
      {
        "type": "text",
        "value": "The frontend is built with modern React patterns: functional components, useState, useEffect, useContext, and react-router-dom for navigation. A number of custom hooks were written to track scroll progress, handle smooth section scrolling, and manage language toggles. CSS animations are used subtly to give polish to key UI elements. The entire experience is mobile-first and fluid, offering a fast, app-like experience across all devices."
      }
    ],
    "url": "https://cerasp.vercel.app",
    "urlTitle": "Visit the live site!"
  },
  {
    "title": "Game Map Generator",
    "technologies": "Unity, C#",
    "content": [
      {
        "type": "text",
        "value": "This was my first fully self-driven deep dive into Unity, sparked by the desire to better understand procedural content generation—specifically the kind of dungeon-like level design seen in games like The Binding of Isaac, Spelunky, and Rogue Legacy. After contributing to the EDU-VRAI VR project, I wanted to explore game design mechanics from the ground up, even if the visuals and systems were primitive at first."
      },
      {
        "type": "image",
        "src": "/pictures/map-generator-layout1.jpg"
      },
      {
        "type": "text",
        "value": "The generator allows the user to define any grid size (minimum 3x3), and automatically builds a maze that includes a spawn room, an exit room, and a selection of other room types—such as enemy rooms, trap rooms, and treasure rooms. I implemented Kruskal’s algorithm to ensure a connected maze with no loops, so the player can always reach the exit from the spawn point, while preserving a nonlinear feel that encourages exploration."
      },
      {
        "type": "image",
        "src": "/pictures/map-generator-layout2.jpg"
      },
      {
        "type": "text",
        "value": "Each room is constructed using prefabs with different combinations of open doorways in the four cardinal directions. Colored markers and primitive shapes were used to quickly differentiate room types. Additional logic determines how far from the spawn each room is placed and assigns subtypes accordingly, ensuring that high-value or high-risk rooms are distributed in meaningful ways."
      },
      {
        "type": "image",
        "src": "/pictures/map-generator-workspace.jpg"
      },
      {
        "type": "text",
        "value": "While the graphics and 3D elements are barebones, I incorporated object pooling to manage potential enemy spawns and allow the system to scale to large grids (tested with 100+ rooms). This began as a technical playground and still functions that way—a personal research project that lets me experiment with some of my favorite game mechanics. For future iterations, I may refactor it into a 2D system to better focus on the logic and usability, but for now, it’s a satisfying start to building systems from scratch."
      }
    ],
    "url": ""
  },
  {
    "title": "Whisper Ads",
    "technologies": "JavaScript, HTML, CSS",
    "content": [
      {
        "type": "text",
        "value": "As someone who often has background audio playing while working—switching between music playlists, YouTube, or Twitch.tv—I noticed a recurring issue with Twitch’s volume handling during ads. When your Twitch player volume is set low, ads sometimes abruptly play at much higher volume, which can be jarring. This inspired me to create my first Chrome extension to handle this problem."
      },
      {
        "type": "image",
        "src": "/pictures/whisper-ads-gui.jpg"
      },
      {
        "type": "text",
        "value": "I started by identifying the key DOM elements—the ad player and the volume slider—and experimented with scripts in the browser console to manipulate the volume before, during, and after ads. After extensive testing, I developed a straightforward solution: the extension polls regularly to detect when an ad element appears. Once an ad is detected, it stores the user’s current volume (saved in Chrome storage) and adjusts the volume according to the user’s preference for ads—either leaving volume unchanged, muting completely, or dimming it by half. When the ad finishes, the volume is restored to the saved user level."
      },
      {
        "type": "image",
        "src": "/pictures/whisper-ads-icon.png"
      },
      {
        "type": "text",
        "value": "This logic runs entirely within the content script. Meanwhile, the background script broadcasts any setting changes to all other open Chrome tabs running Twitch, ensuring consistent behavior. The current UI is very simple, serving as a proof of concept to understand extension development from scratch. Future versions will add more customizable volume settings, a cleaner interface, and support for YouTube ads as well."
      }
    ],
    "url": "https://chromewebstore.google.com/detail/whisperads/jpifidmolmffpipmffgekoikmkocokha",
    "urlTitle": "Check it out on the Chrome Web Store"
  }
]
